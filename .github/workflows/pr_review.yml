name: PR Review Agent

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
        # Install the package in development mode
        pip install -e .
        
        # Verify installation
        python -c "import src.main; print('‚úÖ Package installed successfully')"
        
    - name: Troubleshoot Environment
      run: |
        chmod +x scripts/troubleshoot.sh
        ./scripts/troubleshoot.sh
        
    - name: Configure environment
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "‚ùå GEMINI_API_KEY secret is not set"
          echo "Please add GEMINI_API_KEY to your repository secrets"
          exit 1
        fi
        echo "GEMINI_API_KEY=$GEMINI_API_KEY" >> $GITHUB_ENV
        echo "GITHUB_TOKEN=$GITHUB_TOKEN" >> $GITHUB_ENV
        echo "CI_POST_REVIEW=true" >> $GITHUB_ENV
        
    - name: Run PR Review
      id: pr-review
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CI_POST_REVIEW: true
      run: |
        # Create artifacts directory
        mkdir -p artifacts
        
        # Run the review with error handling
        echo "üîç Starting PR review..."
        python -m src.main review \
          --provider github \
          --owner ${{ github.repository_owner }} \
          --repo ${{ github.event.repository.name }} \
          --pr ${{ github.event.pull_request.number }} \
          --verbose || {
            echo "‚ùå PR review failed with exit code $?"
            echo "Check the logs above for detailed error information"
            exit 1
          }
        
        echo "‚úÖ PR review completed successfully"
      continue-on-error: false
      
    - name: Upload Review Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-review-${{ github.event.pull_request.number }}
        path: |
          artifacts/
        retention-days: 30
        
    - name: Debug - List artifacts
      if: always()
      run: |
        echo "üìÅ Checking artifacts directory:"
        ls -la artifacts/ || echo "No artifacts directory found"
        
    - name: Post Review Summary
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find the review artifact
          const artifactsDir = 'artifacts';
          let reviewData = null;
          
          try {
            const files = fs.readdirSync(artifactsDir);
            const reviewFile = files.find(f => f.startsWith('review_github_') && f.endsWith('.json'));
            
            if (reviewFile) {
              const reviewPath = path.join(artifactsDir, reviewFile);
              const reviewContent = fs.readFileSync(reviewPath, 'utf8');
              reviewData = JSON.parse(reviewContent);
            }
          } catch (error) {
            console.log('Could not read review artifacts:', error.message);
          }
          
          if (reviewData && reviewData.review) {
            const score = reviewData.review.score?.score || 0;
            const grade = reviewData.review.score?.grade || 'F';
            const totalFindings = reviewData.review.metadata?.total_findings || 0;
            const summary = reviewData.review.summary || 'No summary available';
            
            const scoreBadge = score >= 80 ? 'üü¢' : score >= 60 ? 'üü°' : 'üî¥';
            
            const commentBody = `## PR Review Agent Results
            
            ${scoreBadge} **Score: ${score}/100 (${grade})**
            
            üìä **Summary:**
            ${summary}
            
            üìà **Quick Stats:**
            - Issues Found: ${totalFindings}
            - Files Analyzed: ${reviewData.pr_context?.files_changed || 0}
            
            ---
            *This review was automatically generated by PR Review Agent. Check the workflow artifacts for detailed findings.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## PR Review Agent Results
              
              ‚ö†Ô∏è Review completed but no results were generated. Check the workflow logs for details.
              
              This may happen if:
              - No code changes were detected
              - Required API keys are missing
              - The review tool encountered an error`
            });
          }
          
    - name: Check Review Quality Gate
      if: always()
      run: |
        # Exit with appropriate code based on review results
        if [ -f "artifacts/review_github_${{ github.event.pull_request.number }}.json" ]; then
          SCORE=$(python -c "
          import json
          try:
              with open('artifacts/review_github_${{ github.event.pull_request.number }}.json') as f:
                  data = json.load(f)
                  score = data.get('review', {}).get('score', {}).get('score', 0)
                  print(int(score))
          except:
              print(0)
          ")
          
          echo "PR Quality Score: $SCORE"
          
          if [ "$SCORE" -lt 50 ]; then
            echo "‚ùå PR quality is below minimum threshold (50). Please address the issues."
            exit 1
          elif [ "$SCORE" -lt 70 ]; then
            echo "‚ö†Ô∏è PR quality could be improved. Consider addressing the warnings."
            exit 0
          else
            echo "‚úÖ PR quality meets standards."
            exit 0
          fi
        else
          echo "‚ö†Ô∏è No review results found. Please check the workflow logs."
          exit 0
        fi